{"version":3,"sources":["../rxjs/src/observable/BoundCallbackObservable.ts","../rxjs/src/observable/bindCallback.ts","../rxjs/src/add/observable/bindCallback.ts","../rxjs/src/observable/BoundNodeCallbackObservable.ts","../rxjs/src/observable/bindNodeCallback.ts","../rxjs/src/add/observable/bindNodeCallback.ts","../rxjs/src/observable/combineLatest.ts","../rxjs/src/add/observable/combineLatest.ts","../rxjs/src/observable/concat.ts","../rxjs/src/add/observable/concat.ts","../rxjs/src/observable/DeferObservable.ts","../rxjs/src/observable/defer.ts","../rxjs/src/add/observable/defer.ts","../rxjs/src/observable/empty.ts","../rxjs/src/add/observable/empty.ts","../rxjs/src/observable/ForkJoinObservable.ts","../rxjs/src/observable/forkJoin.ts","../rxjs/src/add/observable/forkJoin.ts","../rxjs/src/observable/from.ts","../rxjs/src/add/observable/from.ts","../rxjs/src/observable/FromEventObservable.ts","../rxjs/src/observable/fromEvent.ts","../rxjs/src/add/observable/fromEvent.ts","../rxjs/src/observable/FromEventPatternObservable.ts","../rxjs/src/observable/fromEventPattern.ts","../rxjs/src/add/observable/fromEventPattern.ts","../rxjs/src/observable/fromPromise.ts","../rxjs/src/add/observable/fromPromise.ts","../rxjs/src/observable/GenerateObservable.ts","../rxjs/src/add/observable/generate.ts","../rxjs/src/observable/IfObservable.ts","../rxjs/src/observable/if.ts","../rxjs/src/add/observable/if.ts","../rxjs/src/observable/IntervalObservable.ts","../rxjs/src/observable/interval.ts","../rxjs/src/add/observable/interval.ts","../rxjs/src/observable/merge.ts","../rxjs/src/add/observable/merge.ts","../rxjs/src/add/observable/race.ts","../rxjs/src/observable/NeverObservable.ts","../rxjs/src/observable/never.ts","../rxjs/src/add/observable/never.ts","../rxjs/src/observable/of.ts","../rxjs/src/add/observable/of.ts","../rxjs/src/add/observable/onErrorResumeNext.ts","../rxjs/src/observable/PairsObservable.ts","../rxjs/src/observable/pairs.ts","../rxjs/src/add/observable/pairs.ts","../rxjs/src/observable/RangeObservable.ts","../rxjs/src/observable/range.ts","../rxjs/src/add/observable/range.ts","../rxjs/src/observable/UsingObservable.ts","../rxjs/src/observable/using.ts","../rxjs/src/add/observable/using.ts","../rxjs/src/observable/ErrorObservable.ts","../rxjs/src/observable/throw.ts","../rxjs/src/add/observable/throw.ts","../rxjs/src/observable/TimerObservable.ts","../rxjs/src/observable/timer.ts","../rxjs/src/add/observable/timer.ts","../rxjs/src/observable/zip.ts","../rxjs/src/add/observable/zip.ts","../rxjs/src/observable/dom/ajax.ts","../rxjs/src/add/observable/dom/ajax.ts","../rxjs/src/util/assign.ts","../rxjs/src/observable/dom/WebSocketSubject.ts","../rxjs/src/observable/dom/webSocket.ts","../rxjs/src/add/observable/dom/webSocket.ts","../rxjs/src/operator/buffer.ts","../rxjs/src/add/operator/buffer.ts","../rxjs/src/operator/bufferCount.ts","../rxjs/src/add/operator/bufferCount.ts","../rxjs/src/operator/bufferTime.ts","../rxjs/src/add/operator/bufferTime.ts","../rxjs/src/operator/bufferToggle.ts","../rxjs/src/add/operator/bufferToggle.ts","../rxjs/src/operator/bufferWhen.ts","../rxjs/src/add/operator/bufferWhen.ts","../rxjs/src/operator/cache.ts","../rxjs/src/add/operator/cache.ts","../rxjs/src/operator/catch.ts","../rxjs/src/add/operator/catch.ts","../rxjs/src/operator/combineAll.ts","../rxjs/src/add/operator/combineAll.ts","../rxjs/src/operator/combineLatest.ts","../rxjs/src/add/operator/combineLatest.ts","../rxjs/src/add/operator/concat.ts","../rxjs/src/operator/concatAll.ts","../rxjs/src/add/operator/concatAll.ts","../rxjs/src/operator/concatMap.ts","../rxjs/src/add/operator/concatMap.ts","../rxjs/src/operator/concatMapTo.ts","../rxjs/src/add/operator/concatMapTo.ts","../rxjs/src/operator/count.ts","../rxjs/src/add/operator/count.ts","../rxjs/src/operator/dematerialize.ts","../rxjs/src/add/operator/dematerialize.ts","../rxjs/src/operator/debounce.ts","../rxjs/src/add/operator/debounce.ts","../rxjs/src/operator/debounceTime.ts","../rxjs/src/add/operator/debounceTime.ts","../rxjs/src/operator/defaultIfEmpty.ts","../rxjs/src/add/operator/defaultIfEmpty.ts","../rxjs/src/operator/delay.ts","../rxjs/src/add/operator/delay.ts","../rxjs/src/operator/delayWhen.ts","../rxjs/src/add/operator/delayWhen.ts","../rxjs/src/add/operator/distinct.ts","../rxjs/src/operator/distinct.ts","../rxjs/src/operator/distinctKey.ts","../rxjs/src/add/operator/distinctKey.ts","../rxjs/src/add/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilKeyChanged.ts","../rxjs/src/add/operator/distinctUntilKeyChanged.ts","../rxjs/src/operator/do.ts","../rxjs/src/add/operator/do.ts","../rxjs/src/operator/exhaust.ts","../rxjs/src/add/operator/exhaust.ts","../rxjs/src/operator/exhaustMap.ts","../rxjs/src/add/operator/exhaustMap.ts","../rxjs/src/operator/expand.ts","../rxjs/src/add/operator/expand.ts","../rxjs/src/operator/elementAt.ts","../rxjs/src/add/operator/elementAt.ts","../rxjs/src/add/operator/filter.ts","../rxjs/src/operator/finally.ts","../rxjs/src/add/operator/finally.ts","../rxjs/src/add/operator/find.ts","../rxjs/src/operator/find.ts","../rxjs/src/operator/findIndex.ts","../rxjs/src/add/operator/findIndex.ts","../rxjs/src/operator/first.ts","../rxjs/src/add/operator/first.ts","../rxjs/src/util/MapPolyfill.ts","../rxjs/src/util/Map.ts","../rxjs/src/util/FastMap.ts","../rxjs/src/operator/groupBy.ts","../rxjs/src/add/operator/groupBy.ts","../rxjs/src/util/noop.ts","../rxjs/src/operator/ignoreElements.ts","../rxjs/src/add/operator/ignoreElements.ts","../rxjs/src/operator/isEmpty.ts","../rxjs/src/add/operator/isEmpty.ts","../rxjs/src/operator/audit.ts","../rxjs/src/add/operator/audit.ts","../rxjs/src/operator/auditTime.ts","../rxjs/src/add/operator/auditTime.ts","../rxjs/src/operator/last.ts","../rxjs/src/add/operator/last.ts","../rxjs/src/operator/let.ts","../rxjs/src/add/operator/let.ts","../rxjs/src/operator/every.ts","../rxjs/src/add/operator/every.ts","../rxjs/src/add/operator/map.ts","../rxjs/src/operator/mapTo.ts","../rxjs/src/add/operator/mapTo.ts","../rxjs/src/operator/materialize.ts","../rxjs/src/add/operator/materialize.ts","../rxjs/src/operator/max.ts","../rxjs/src/add/operator/max.ts","../rxjs/src/operator/merge.ts","../rxjs/src/add/operator/merge.ts","../rxjs/src/add/operator/mergeAll.ts","../rxjs/src/operator/mergeMap.ts","../rxjs/src/add/operator/mergeMap.ts","../rxjs/src/operator/mergeMapTo.ts","../rxjs/src/add/operator/mergeMapTo.ts","../rxjs/src/operator/mergeScan.ts","../rxjs/src/add/operator/mergeScan.ts","../rxjs/src/operator/min.ts","../rxjs/src/add/operator/min.ts","../rxjs/src/add/operator/multicast.ts","../rxjs/src/add/operator/observeOn.ts","../rxjs/src/observable/PromiseObservable.ts","../rxjs/src/observable/IteratorObservable.ts","../rxjs/src/observable/ArrayLikeObservable.ts","../rxjs/src/observable/FromObservable.ts","../rxjs/src/operator/onErrorResumeNext.ts","../rxjs/src/add/operator/onErrorResumeNext.ts","../rxjs/src/operator/pairwise.ts","../rxjs/src/add/operator/pairwise.ts","../rxjs/src/util/not.ts","../rxjs/src/operator/filter.ts","../rxjs/src/operator/partition.ts","../rxjs/src/add/operator/partition.ts","../rxjs/src/operator/pluck.ts","../rxjs/src/add/operator/pluck.ts","../rxjs/src/operator/publish.ts","../rxjs/src/add/operator/publish.ts","../rxjs/src/operator/publishBehavior.ts","../rxjs/src/add/operator/publishBehavior.ts","../rxjs/src/operator/publishReplay.ts","../rxjs/src/add/operator/publishReplay.ts","../rxjs/src/operator/publishLast.ts","../rxjs/src/add/operator/publishLast.ts","../rxjs/src/operator/race.ts","../rxjs/src/add/operator/race.ts","../rxjs/src/operator/reduce.ts","../rxjs/src/add/operator/reduce.ts","../rxjs/src/operator/repeat.ts","../rxjs/src/add/operator/repeat.ts","../rxjs/src/operator/repeatWhen.ts","../rxjs/src/add/operator/repeatWhen.ts","../rxjs/src/operator/retry.ts","../rxjs/src/add/operator/retry.ts","../rxjs/src/operator/retryWhen.ts","../rxjs/src/add/operator/retryWhen.ts","../rxjs/src/operator/sample.ts","../rxjs/src/add/operator/sample.ts","../rxjs/src/operator/sampleTime.ts","../rxjs/src/add/operator/sampleTime.ts","../rxjs/src/operator/scan.ts","../rxjs/src/add/operator/scan.ts","../rxjs/src/operator/sequenceEqual.ts","../rxjs/src/add/operator/sequenceEqual.ts","../rxjs/src/operator/multicast.ts","../rxjs/src/operator/share.ts","../rxjs/src/add/operator/share.ts","../rxjs/src/operator/single.ts","../rxjs/src/add/operator/single.ts","../rxjs/src/operator/skip.ts","../rxjs/src/add/operator/skip.ts","../rxjs/src/operator/skipUntil.ts","../rxjs/src/add/operator/skipUntil.ts","../rxjs/src/operator/skipWhile.ts","../rxjs/src/add/operator/skipWhile.ts","../rxjs/src/operator/mergeAll.ts","../rxjs/src/operator/concat.ts","../rxjs/src/operator/startWith.ts","../rxjs/src/add/operator/startWith.ts","../rxjs/src/util/isNumeric.ts","../rxjs/src/observable/SubscribeOnObservable.ts","../rxjs/src/operator/subscribeOn.ts","../rxjs/src/add/operator/subscribeOn.ts","../rxjs/src/operator/switch.ts","../rxjs/src/add/operator/switch.ts","../rxjs/src/operator/switchMap.ts","../rxjs/src/add/operator/switchMap.ts","../rxjs/src/operator/switchMapTo.ts","../rxjs/src/add/operator/switchMapTo.ts","../rxjs/src/operator/take.ts","../rxjs/src/add/operator/take.ts","../rxjs/src/operator/takeLast.ts","../rxjs/src/add/operator/takeLast.ts","../rxjs/src/operator/takeUntil.ts","../rxjs/src/add/operator/takeUntil.ts","../rxjs/src/operator/takeWhile.ts","../rxjs/src/add/operator/takeWhile.ts","../rxjs/src/operator/throttle.ts","../rxjs/src/add/operator/throttle.ts","../rxjs/src/operator/throttleTime.ts","../rxjs/src/add/operator/throttleTime.ts","../rxjs/src/add/operator/timeInterval.ts","../rxjs/src/operator/timeout.ts","../rxjs/src/add/operator/timeout.ts","../rxjs/src/util/isDate.ts","../rxjs/src/operator/timeoutWith.ts","../rxjs/src/add/operator/timeoutWith.ts","../rxjs/src/add/operator/timestamp.ts","../rxjs/src/operator/toArray.ts","../rxjs/src/add/operator/toArray.ts","../rxjs/src/operator/toPromise.ts","../rxjs/src/add/operator/toPromise.ts","../rxjs/src/operator/window.ts","../rxjs/src/add/operator/window.ts","../rxjs/src/operator/windowCount.ts","../rxjs/src/add/operator/windowCount.ts","../rxjs/src/operator/windowTime.ts","../rxjs/src/add/operator/windowTime.ts","../rxjs/src/operator/windowToggle.ts","../rxjs/src/add/operator/windowToggle.ts","../rxjs/src/operator/windowWhen.ts","../rxjs/src/add/operator/windowWhen.ts","../rxjs/src/operator/withLatestFrom.ts","../rxjs/src/add/operator/withLatestFrom.ts","../rxjs/src/add/operator/zip.ts","../rxjs/src/observable/ScalarObservable.ts","../rxjs/src/observable/EmptyObservable.ts","../rxjs/src/util/isScheduler.ts","../rxjs/src/observable/ArrayObservable.ts","../rxjs/src/OuterSubscriber.ts","../rxjs/src/util/isPromise.ts","../rxjs/src/InnerSubscriber.ts","../rxjs/src/util/subscribeToResult.ts","../rxjs/src/operator/zip.ts","../rxjs/src/operator/zipAll.ts","../rxjs/src/add/operator/zipAll.ts","../rxjs/src/AsyncSubject.ts","../rxjs/src/operator/observeOn.ts","../rxjs/src/ReplaySubject.ts","../rxjs/src/BehaviorSubject.ts","../rxjs/src/observable/MulticastObservable.ts","../rxjs/src/observable/ConnectableObservable.ts","../rxjs/src/util/EmptyError.ts","../rxjs/src/util/ArgumentOutOfRangeError.ts","../rxjs/src/operator/timeInterval.ts","../rxjs/src/operator/timestamp.ts","../rxjs/src/Notification.ts","../rxjs/src/testing/ColdObservable.ts","../rxjs/src/util/ObjectUnsubscribedError.ts","../rxjs/src/SubjectSubscription.ts","../rxjs/src/Subject.ts","../rxjs/src/testing/SubscriptionLoggable.ts","../rxjs/src/util/applyMixins.ts","../rxjs/src/testing/HotObservable.ts","../rxjs/src/testing/SubscriptionLog.ts","../rxjs/src/testing/TestScheduler.ts","../rxjs/src/scheduler/VirtualTimeScheduler.ts","../rxjs/src/util/toSubscriber.ts","../rxjs/src/Observable.ts","../rxjs/src/Observer.ts","../rxjs/src/Subscriber.ts","../rxjs/src/operator/map.ts","../rxjs/src/observable/dom/AjaxObservable.ts","../rxjs/src/util/Immediate.ts","../rxjs/src/scheduler/AsapAction.ts","../rxjs/src/scheduler/AsapScheduler.ts","../rxjs/src/scheduler/asap.ts","../rxjs/src/scheduler/async.ts","../rxjs/src/scheduler/QueueAction.ts","../rxjs/src/scheduler/QueueScheduler.ts","../rxjs/src/scheduler/queue.ts","../rxjs/src/util/isArray.ts","../rxjs/src/util/isObject.ts","../rxjs/src/util/isFunction.ts","../rxjs/src/util/tryCatch.ts","../rxjs/src/util/errorObject.ts","../rxjs/src/util/UnsubscriptionError.ts","../rxjs/src/Subscription.ts","../rxjs/src/scheduler/Action.ts","../rxjs/src/scheduler/AsyncAction.ts","../rxjs/src/util/AnimationFrame.ts","../rxjs/src/scheduler/AnimationFrameAction.ts","../rxjs/src/Scheduler.ts","../rxjs/src/scheduler/AsyncScheduler.ts","../rxjs/src/scheduler/AnimationFrameScheduler.ts","../rxjs/src/scheduler/animationFrame.ts","../rxjs/src/symbol/rxSubscriber.ts","../rxjs/src/symbol/iterator.ts","../rxjs/src/util/root.ts","../rxjs/src/symbol/observable.ts","../rxjs/src/Rx.ts"],"names":["arg","value","subject","next","complete","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","callbackFunc","selector","args","scheduler","_super","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","subscribe","state","self","result_2","add","dispatchError","dispatchNext","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","combineLatest","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","sourceObj","addListener","removeListener","on","off","toString","addEventListener","removeEventListener","isFunction_1","Subscription_1","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","isNodeList","isHTMLCollection","isEventTarget","source_1","isJQueryStyleEventEmitter","source_2","isNodeStyleEventEmmitter","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","Object","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","root_1","root","assign","TypeError","output","hasOwnProperty","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","socket","protocol","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","closingNotifier","BufferOperator","buffer","BufferSubscriber","_next","push","buffer_1","bufferSize","startBufferEvery","BufferCountOperator","bufferCount","BufferCountSubscriber","buffers","remove","splice","bufferCount_1","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","prevContext","context","closeContext","openContext","closeAction","dispatchBufferClose","bufferTime","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferCreation","filledBufferContext","onBufferFull","_unsubscribe","spliceIndex","indexOf","bufferTime_1","openings","closingSelector","BufferToggleOperator","bufferToggle","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","BufferWhenOperator","bufferWhen","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","windowTime","outerSub","refs","getSubject","s","cache","cache_1","CatchOperator","caught","_catch","CatchSubscriber","isStopped","catch_1","catch","combineAll","combineAll_1","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","slice","mergeAll_1","MergeAllOperator","concatAll","concatAll_1","mergeMap_1","MergeMapOperator","concatMap","concatMap_1","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","DeMaterializeOperator","dematerialize","DeMaterializeSubscriber","observe","dematerialize_1","durationSelector","DebounceOperator","debounce","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","DebounceTimeOperator","debouncedNext","debounceTime","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultValue","DefaultIfEmptyOperator","defaultIfEmpty","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","delayWhen","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","distinct_1","distinct","compare","flushes","DistinctOperator","DistinctSubscriber","found","y","distinctKey","distinctKey_1","distinctUntilChanged_1","distinctUntilChanged","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","nextOrObserver","DoOperator","_do","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","SwitchFirstOperator","exhaust","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","SwitchFirstMapOperator","exhaustMap","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","concurrent","ExpandOperator","expand","ExpandSubscriber","subscribeToProjection","expand_1","ElementAtOperator","ArgumentOutOfRangeError_1","elementAt","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","callback","FinallyOperator","_finally","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","FirstOperator","EmptyError_1","first","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","size","_values","_keys","MapPolyfill","get","set","delete","clear","forEach","cb","MapPolyfill_1","Map","FastMap","elementSelector","GroupByOperator","Map_1","FastMap_1","groupBy","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","IgnoreElementsOperator","ignoreElements","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","AuditOperator","audit","AuditSubscriber","throttled","clearThrottle","audit_1","AuditTimeOperator","auditTime","AuditTimeSubscriber","auditTime_1","LastOperator","last","LastSubscriber","last_1","letProto","let_1","let","letBind","EveryOperator","every","EverySubscriber","everyValueMatch","every_1","map_1","map","MapToOperator","mapTo","MapToSubscriber","mapTo_1","MaterializeOperator","materialize","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","seed","MergeScanOperator","mergeScan","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","iterator_1","$$iterator","StringIterator","ArrayIterator","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","getIterator","hasError","done","str","charAt","arr","toLength","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isArrayLike","$$observable","isPromise","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","PairwiseOperator","pairwise","PairwiseSubscriber","hasPrev","prev","pairwise_1","pred","notPred","not","FilterOperator","FilterSubscriber","not_1","partition","partition_1","properties","plucker","props","mapper","currentProp","p","pluck","pluck_1","publish","publish_1","BehaviorSubject_1","BehaviorSubject","publishBehavior","publishBehavior_1","publishReplay","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","accumulator","reduce","ReduceSubscriber","hasSeed","_tryReduce","RepeatOperator","repeat","RepeatSubscriber","repeat_1","notifier","RepeatWhenOperator","repeatWhen","RepeatWhenSubscriber","notifications","retries","retriesSubscription","repeatWhen_1","RetryOperator","retry","RetrySubscriber","retry_1","RetryWhenOperator","retryWhen","RetryWhenSubscriber","errors","retryWhen_1","SampleOperator","sample","SampleSubscriber","sample_1","SampleTimeOperator","sampleTime","SampleTimeSubscriber","dispatchNotification","sampleTime_1","ScanOperator","scan","ScanSubscriber","accumulatorSet","defineProperty","_seed","scan_1","compareTo","comparor","SequenceEqualOperator","sequenceEqual","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastObservable_1","MulticastObservable","ConnectableObservable_1","ConnectableObservable","shareSubjectFactory","refCount","share","share_1","SingleOperator","single","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","SkipOperator","skip","SkipSubscriber","skip_1","SkipUntilOperator","skipUntil","SkipUntilSubscriber","isInnerStopped","skipUntil_1","SkipWhileOperator","skipWhile","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","array","startWith","startWith_1","val","parseFloat","asap_1","SubscribeOnObservable","delayTime","asap","SubscribeOnObservable_1","subscribeOn","subscribeOn_1","SwitchOperator","_switch","SwitchSubscriber","unsubscribeInner","switch_1","switch","SwitchMapOperator","switchMap","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","SwitchMapToOperator","switchMapTo","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","TakeOperator","take","TakeSubscriber","take_1","TakeLastOperator","takeLast","TakeLastSubscriber","ring","takeLast_1","TakeUntilOperator","takeUntil","TakeUntilSubscriber","takeUntil_1","TakeWhileOperator","takeWhile","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","ThrottleOperator","throttle","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","ThrottleTimeOperator","throttleTime","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","due","errorToSend","absoluteTimeout","waitFor","TimeoutOperator","timeout","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeout_1","Date","withObservable","TimeoutWithOperator","timeoutWith","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","ToArrayOperator","toArray","ToArraySubscriber","toArray_1","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise","toPromise_1","windowBoundaries","WindowOperator","window","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowSize","startWindowEvery","WindowCountOperator","windowCount","WindowCountSubscriber","windows","c","windowCount_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","dispatchWindowCreation","window_2","dispatchWindowTimeSpanOnly","window_3","window_4","windowTime_1","WindowToggleOperator","windowToggle","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","WithLatestFromOperator","withLatestFrom","WithLatestFromSubscriber","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","EMPTY","thrownError","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","ObjectUnsubscribedError_1","_value","getValue","ObjectUnsubscribedError","connectable","connect","_refCount","_subject","connection","_connection","ConnectableSubscriber","RefCountOperator","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","exception","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","SubjectSubscription","subscriberIndex","SubjectSubscription_1","rxSubscriber_1","$$rxSubscriber","copy","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","toSubscriber_1","observerOrNext","sink","Observer_1","destinationOrNext","SafeSubscriber","_parent","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","XMLHttpRequest","xhr","withCredentials","XDomainRequest","progId","progIds","ActiveXObject","headers","method","body","responseType","response","ajaxGet","ajaxPost","ajaxDelete","ajaxPut","ajaxGetJSON","urlOrRequest","request","createXHR","crossDomain","getCORSRequest","getXMLHttpRequest","prop","AjaxSubscriber","post","put","getJSON","FormData","serializeBody","AjaxResponse","user","password","open","setHeaders","setupEvents","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","progressSubscriber","ontimeout","xhrTimeout","AjaxTimeoutError","upload","onprogress","xhrProgress","xhrError","AjaxError","onreadystatechange","xhrReadyStateChange","status_1","status","responseText","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","isObject","tryCatchTarget","tryCatcher","UnsubscriptionError","isObject_1","UnsubscriptionError_1","hasErrors","_subscriptions","trial","sub","teardown","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","Set","objectTypes","boolean","function","object","number","string","freeGlobal","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\nfunction dispatch<T>(state: { source: BoundNodeCallbackObservable<T>, subscriber: Subscriber<T> }) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  Scheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T, R> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @parm {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Inital state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  (<any> this).schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional Scheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional Scheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: Scheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: Scheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: any, scheduler?: Scheduler) {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nconst Object = root.Object;\n\nif (typeof (<any>Object).assign != 'function') {\n  (function () {\n    (<any>Object).assign = function assignPolyfill(target: Object, ...sources: Array<Object>): Object {\n      if (target === undefined || target === null) {\n        throw new TypeError('cannot convert undefined or null to object');\n      }\n\n      const output = Object(target);\n      const len = sources.length;\n      for (let index = 0; index < len; index++) {\n        let source = sources[index];\n        if (source !== undefined && source !== null) {\n          for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n              output[key] = source[key];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n}\n\nexport const assign: (target: Object, ...sources: Array<Object>) => Object = Object.assign;","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => observer.error(e);\n\n    socket.onclose = (e: CloseEvent) => {\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0 && socket && socket.readyState === 1) {\n        socket.close();\n        this.socket = null;\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this.socket = null;\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nexport interface BufferSignature<T> {\n  (closingNotifier: Observable<any>): Observable<T[]>;\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer, BufferSignature } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: BufferSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nexport interface BufferCountSignature<T> {\n  (bufferSize: number, startBufferEvery?: number): Observable<T[]>;\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [[]];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = (this.count += 1);\n    const destination = this.destination;\n    const bufferSize = this.bufferSize;\n    const startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n    const buffers = this.buffers;\n    const len = buffers.length;\n    let remove = -1;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        remove = i;\n        destination.next(buffer);\n      }\n    }\n\n    if (remove !== -1) {\n      buffers.splice(remove, 1);\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount, BufferCountSignature } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: BufferCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nexport interface BufferTimeSignature<T> {\n  (bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = (<any>this).schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime, BufferTimeSignature } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: BufferTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface BufferToggleSignature<T> {\n  <O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]>;\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { bufferToggle, BufferToggleSignature } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: BufferToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nexport interface BufferWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<T[]>;\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen, BufferWhenSignature } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: BufferWhenSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {Observable<any>}\n * @method cache\n * @owner Observable\n */\nexport function cache<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                         windowTime: number = Number.POSITIVE_INFINITY,\n                         scheduler?: Scheduler): Observable<T> {\n  let subject: ReplaySubject<T>;\n  let source = this;\n  let refs = 0;\n  let outerSub: Subscription;\n\n  const getSubject = () => {\n    subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n    return subject;\n  };\n\n  return new Observable<T>((observer: Observer<T>) => {\n    if (!subject) {\n      subject = getSubject();\n      outerSub = source.subscribe(\n        (value: T) => subject.next(value),\n        (err: any) => {\n          let s = subject;\n          subject = null;\n          s.error(err);\n        },\n        () => subject.complete()\n      );\n    }\n\n    refs++;\n\n    if (!subject) {\n      subject = getSubject();\n    }\n    let innerSub = subject.subscribe(observer);\n\n    return () => {\n      refs--;\n      if (innerSub) {\n        innerSub.unsubscribe();\n      }\n      if (refs === 0) {\n        outerSub.unsubscribe();\n      }\n    };\n  });\n}\n\nexport interface CacheSignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { cache, CacheSignature } from '../../operator/cache';\n\nObservable.prototype.cache = cache;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    cache: CacheSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nexport function _catch<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nexport interface CatchSignature<T> {\n  <R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R>;\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.unsubscribe();\n      (<any>this.destination).remove(this);\n      subscribeToResult(this, result);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch, CatchSignature } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: CatchSignature<T>;\n    _catch: CatchSignature<T>;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n\nexport interface CombineAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll, CombineAllSignature } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: CombineAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return new ArrayObservable(observables).lift(new CombineLatestOperator(project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface CombineLatestSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<T>[]): Observable<Array<T>>;\n  <TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest, CombineLatestSignature } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: CombineLatestSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat, ConcatSignature } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: ConcatSignature<T>;\n  }\n}","import { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): T {\n  return this.lift(new MergeAllOperator<T>(1));\n}\n\nexport interface ConcatAllSignature<T> {\n  (): T;\n  <R>(): Subscribable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll, ConcatAllSignature } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: ConcatAllSignature<T>;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n\nexport interface ConcatMapSignature<T> {\n  <R>(project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap, ConcatMapSignature } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: ConcatMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n\nexport interface ConcatMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo, ConcatMapToSignature } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: ConcatMapToSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nexport interface CountSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count, CountSignature } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: CountSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nexport interface DematerializeSignature<T> {\n  <R>(): Observable<R>;\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source._subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize, DematerializeSignature } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: DematerializeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nexport interface DebounceSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce, DebounceSignature } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: DebounceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nexport interface DebounceTimeSignature<T> {\n  (dueTime: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime, DebounceTimeSignature } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: DebounceTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nexport interface DefaultIfEmptySignature<T> {\n  (defaultValue?: T): Observable<T>;\n  <R>(defaultValue?: R): Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty, DefaultIfEmptySignature } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: DefaultIfEmptySignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nexport interface DelaySignature<T> {\n  (delay: number | Date, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay, DelaySignature } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: DelaySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nexport interface DelayWhenSignature<T> {\n  (delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen, DelayWhenSignature } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: DelayWhenSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\nimport { distinct, DistinctSignature } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: DistinctSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T>(compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(compare, flushes));\n}\n\nexport interface DistinctSignature<T> {\n  (compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\nclass DistinctOperator<T> implements Operator<T, T> {\n  constructor(private compare: (x: T, y: T) => boolean, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T> extends OuterSubscriber<T, T> {\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>, compare: (x: T, y: T) => boolean, flushes: Observable<any>) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.length = 0;\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    let found = false;\n    const values = this.values;\n    const len = values.length;\n    try {\n      for (let i = 0; i < len; i++) {\n        if (this.compare(values[i], value)) {\n          found = true;\n          return;\n        }\n      }\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.values.push(value);\n    this.destination.next(value);\n  }\n\n  private compare(x: T, y: T): boolean {\n    return x === y;\n  }\n}\n","import { distinct } from './distinct';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\nexport function distinctKey<T>(key: string, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return distinct.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  }, flushes);\n}\n\nexport interface DistinctKeySignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { distinctKey, DistinctKeySignature } from '../../operator/distinctKey';\n\nObservable.prototype.distinctKey = distinctKey;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctKey: DistinctKeySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged, DistinctUntilChangedSignature } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: DistinctUntilChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nexport interface DistinctUntilChangedSignature<T> {\n (compare?: (x: T, y: T) => boolean): Observable<T>;\n <K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n\nexport interface DistinctUntilKeyChangedSignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged, DistinctUntilKeyChangedSignature } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: DistinctUntilKeyChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nexport interface DoSignature<T> {\n  (next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\n  (observer: PartialObserver<T>): Observable<T>;\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do, DoSignature } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: DoSignature<T>;\n    _do: DoSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nexport interface SwitchFirstSignature<T> {\n  (): T;\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust, SwitchFirstSignature } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: SwitchFirstSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nexport interface SwitchFirstMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap, SwitchFirstMapSignature } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: SwitchFirstMapSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport interface ExpandSignature<T> {\n  (project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand, ExpandSignature } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: ExpandSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nexport interface ElementAtSignature<T> {\n  (index: number, defaultValue?: T): Observable<T>;\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt, ElementAtSignature } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: ElementAtSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter, FilterSignature } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: FilterSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nexport interface FinallySignature<T> {\n  (callback: () => void): Observable<T>;\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally, FinallySignature } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: FinallySignature<T>;\n    _finally: FinallySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find, FindSignature } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: FindSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport interface FindSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<T>;\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return this.lift(new FindValueOperator(predicate, this, true, thisArg));\n}\n\nexport interface FindIndexSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<number>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex, FindIndexSignature } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: FindIndexSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface FirstSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first, FirstSignature } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: FirstSignature<T>;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: (value: T) => R,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\n\n/* tslint:disable:max-line-length */\nexport interface GroupBySignature<T> {\n  <K>(keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\n  <K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\n  <K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\n}\n/* tslint:enable:max-line-length */\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(public source: Observable<T>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source._subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      groups.set(key, group = new Subject<R>());\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy, GroupBySignature } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: GroupBySignature<T>;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nexport interface IgnoreElementsSignature<T> {\n  (): Observable<T>;\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements, IgnoreElementsSignature } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: IgnoreElementsSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty(): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nexport interface IsEmptySignature<T> {\n  (): Observable<boolean>;\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty, IsEmptySignature } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: IsEmptySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nexport interface AuditSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit, AuditSignature } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: AuditSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nexport interface AuditTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime, AuditTimeSignature } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: AuditTimeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface LastSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last, LastSignature } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: LastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n\nexport interface LetSignature<T> {\n  <R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto, LetSignature } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: LetSignature<T>;\n    letBind: LetSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nexport interface EverySignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every, EverySignature } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: EverySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map, MapSignature } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: MapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nexport interface MapToSignature<T> {\n  <R>(value: R): Observable<R>;\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo, MapToSignature } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: MapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nexport interface MaterializeSignature<T> {\n  (): Observable<Notification<T>>;\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source._subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize, MaterializeSignature } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: MaterializeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n\nexport interface MaxSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { max, MaxSignature } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: MaxSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  observables.unshift(this);\n  return mergeStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface MergeSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  (concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge, MergeSignature } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: MergeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll, MergeAllSignature } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: MergeAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source._subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap, MergeMapSignature } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: MergeMapSignature<T>;\n    mergeMap: MergeMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapToSignature<T> {\n  <R>(observable: ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo, MergeMapToSignature } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: MergeMapToSignature<T>;\n    mergeMapTo: MergeMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport interface MergeScanSignature<T> {\n  <R>(project: (acc: R, value: T) => Observable<R>, seed: R, concurrent?: number): Observable<R>;\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan, MergeScanSignature } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: MergeScanSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n\nexport interface MinSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { min, MinSignature } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: MinSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast, MulticastSignature } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: MulticastSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn, ObserveOnSignature } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: ObserveOnSignature<T>;\n  }\n}","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: Scheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: Scheduler) {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { Scheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\r\nimport { FromObservable } from '../observable/FromObservable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { isArray } from '../util/isArray';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n\r\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                       Array<ObservableInput<any>> |\r\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<Observable<any>>>nextSources[0];\r\n  }\r\n\r\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\n/* tslint:disable:max-line-length */\r\nexport interface OnErrorResumeNextSignature<T> {\r\n  <R>(v: ObservableInput<R>): Observable<R>;\r\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\n  <R>(array: ObservableInput<any>[]): Observable<R>;\r\n}\r\n/* tslint:enable:max-line-length */\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                              Array<ObservableInput<any>> |\r\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\r\n  let source: ObservableInput<any> = null;\r\n\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\r\n  }\r\n  source = nextSources.shift();\r\n\r\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\r\n  constructor(private nextSources: Array<ObservableInput<any>>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n  }\r\n}\r\n\r\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  constructor(protected destination: Subscriber<T>,\r\n              private nextSources: Array<ObservableInput<any>>) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  private subscribeToNextSource(): void {\r\n    const next = this.nextSources.shift();\r\n    if (next) {\r\n      this.add(subscribeToResult(this, next));\r\n    } else {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext, OnErrorResumeNextSignature } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: OnErrorResumeNextSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nexport interface PairwiseSignature<T> {\n  (): Observable<[T, T]>;\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source._subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise, PairwiseSignature } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: PairwiseSignature<T>;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nexport interface FilterSignature<T> {\n  (predicate: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n\nexport interface PartitionSignature<T> {\n  (predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition, PartitionSignature } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: PartitionSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<R>(...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nexport interface PluckSignature<T> {\n  <R>(...properties: string[]): Observable<R>;\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck, PluckSignature } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: PluckSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface PublishSignature<T> {\n  (): ConnectableObservable<T>;\n  (selector: selector<T>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publish, PublishSignature } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: PublishSignature<T>;\n  }\n}","import { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n\nexport interface PublishBehaviorSignature<T> {\n  (value: T): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior, PublishBehaviorSignature } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: PublishBehaviorSignature<T>;\n  }\n}","import { ReplaySubject } from '../ReplaySubject';\nimport { Scheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n\nexport interface PublishReplaySignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay, PublishReplaySignature } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: PublishReplaySignature<T>;\n  }\n}","import { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n\nexport interface PublishLastSignature<T> {\n  (): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast, PublishLastSignature } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: PublishLastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  observables.unshift(this);\n  return raceStatic.apply(this, observables);\n}\n\nexport interface RaceSignature<T> {\n  (...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\n  <R>(...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n          this.add(subscription);\n        }\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race, RaceSignature } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: RaceSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  return this.lift(new ReduceOperator(accumulator, seed));\n}\n\nexport interface ReduceSignature<T> {\n  (accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\n  (accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\n  <R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n\n  acc: T | R;\n  hasSeed: boolean;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed?: R) {\n    super(destination);\n    this.acc = seed;\n    this.accumulator = accumulator;\n    this.hasSeed = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce, ReduceSignature } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nexport interface RepeatSignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat, RepeatSignature } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: RepeatSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier, this));\n}\n\nexport interface RepeatWhenSignature<T> {\n  (notifier: (notifications: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  complete() {\n    if (!this.isStopped) {\n\n      let notifications = this.notifications;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        notifications = new Subject();\n        retries = tryCatch(this.notifier)(notifications);\n        if (retries === errorObject) {\n          return super.complete();\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.notifications = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.notifications = notifications;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen, RepeatWhenSignature } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: RepeatWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nexport interface RetrySignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry, RetrySignature } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: RetrySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nexport interface RetryWhenSignature<T> {\n  (notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen, RetryWhenSignature } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: RetryWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nexport interface SampleSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<any>, notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample, SampleSignature } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: SampleSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nexport interface SampleTimeSignature<T> {\n  (period: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  (<any>this).schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime, SampleTimeSignature } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: SampleTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  return this.lift(new ScanOperator(accumulator, seed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private accumulatorSet: boolean = false;\n  private _seed: T | R;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.accumulatorSet = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, seed?: T | R) {\n    super(destination);\n    this.seed = seed;\n    this.accumulatorSet = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T): void {\n    if (!this.accumulatorSet) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ReduceSignature } from '../../operator/reduce';\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nexport interface SequenceEqualSignature<T> {\n  (compareTo: Observable<T>, comparor?: (a: T, b: T) => boolean): Observable<boolean>;\n}\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, T> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual, SequenceEqualSignature } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: SequenceEqualSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { MulticastObservable } from '../observable/MulticastObservable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  return !selector ?\n    new ConnectableObservable(this, subjectFactory) :\n    new MulticastObservable(this, subjectFactory, selector);\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface MulticastSignature<T> {\n  (subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\n  (SubjectFactory: () => Subject<T>, selector?: selector<T>): Observable<T>;\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n\nexport interface ShareSignature<T> {\n  (): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { share, ShareSignature } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: ShareSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nexport interface SingleSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single, SingleSignature } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: SingleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nexport interface SkipSignature<T> {\n  (total: number): Observable<T>;\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip, SkipSignature } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: SkipSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nexport interface SkipUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil, SkipUntilSignature } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: SkipUntilSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nexport interface SkipWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile, SkipWhileSignature } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: SkipWhileSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): T {\n  return this.lift(new MergeAllOperator<T>(concurrent));\n}\n\nexport interface MergeAllSignature<T> {\n  (concurrent?: number): T;\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return concatStatic<T, R>(this, ...observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ConcatSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n\nexport interface StartWithSignature<T> {\n  (v1: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\n  (...array: Array<T | Scheduler>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith, StartWithSignature } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: StartWithSignature<T>;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return source.subscribe(subscriber);\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return new SubscribeOnObservable<T>(this, delay, scheduler);\n}\n\nexport interface SubscribeOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { subscribeOn, SubscribeOnSignature } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: SubscribeOnSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(): T {\n  return this.lift(new SwitchOperator());\n}\n\nexport interface SwitchSignature<T> {\n  (): T;\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch, SwitchSignature } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: SwitchSignature<T>;\n    _switch: SwitchSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nexport interface SwitchMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap, SwitchMapSignature } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: SwitchMapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nexport interface SwitchMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo, SwitchMapToSignature } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: SwitchMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nexport interface TakeSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    if (++this.count <= total) {\n      this.destination.next(value);\n      if (this.count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take, TakeSignature } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: TakeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nexport interface TakeLastSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast, TakeLastSignature } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: TakeLastSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nexport interface TakeUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil, TakeUntilSignature } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: TakeUntilSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nexport interface TakeWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile, TakeWhileSignature } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: TakeWhileSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nexport interface ThrottleSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle, ThrottleSignature } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: ThrottleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nexport interface ThrottleTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime, ThrottleTimeSignature } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: ThrottleTimeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval, TimeIntervalSignature } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: TimeIntervalSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           errorToSend: any = null,\n                           scheduler: Scheduler = async): Observable<T> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\n\nexport interface TimeoutSignature<T> {\n  (due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout() {\n    this.error(this.errorToSend || new Error('timeout'));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout, TimeoutSignature } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: TimeoutSignature<T>;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nexport interface TimeoutWithSignature<T> {\n  (due: number | Date, withObservable: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  <R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: Scheduler): Observable<T | R>;\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith, TimeoutWithSignature } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: TimeoutWithSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp, TimestampSignature } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: TimestampSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nexport interface ToArraySignature<T> {\n  (): Observable<T[]>;\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray, ToArraySignature } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: ToArraySignature<T>;\n  }\n}","import { root } from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n\nexport interface ToPromiseSignature<T> {\n  (): Promise<T>;\n  (PromiseCtor: typeof Promise): Promise<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise, ToPromiseSignature } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: ToPromiseSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nexport interface WindowSignature<T> {\n  (windowBoundaries: Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source._subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window, WindowSignature } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: WindowSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nexport interface WindowCountSignature<T> {\n  (windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount, WindowCountSignature } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: WindowCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nexport interface WindowTimeSignature<T> {\n  (windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  (<any>this).schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = <Action<CreationState<T>>>this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime, WindowTimeSignature } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: WindowTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface WindowToggleSignature<T> {\n  <O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle, WindowToggleSignature } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: WindowToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nexport interface WindowWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen, WindowWhenSignature } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: WindowWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface WithLatestFromSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<any>[]): Observable<R>;\n  <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom, WithLatestFromSignature } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: WithLatestFromSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto, ZipSignature } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: ZipSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler<T>(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  }\n\n  if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new Error('invalid observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    destination.error(new TypeError('unknown type returned'));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  observables.unshift(this);\n  return zipStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ZipSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: Array<ObservableInput<T>>): Observable<R>;\n  <TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private index = 0;\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    const index = this.index++;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>,\n              private index: number) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n\nexport interface ZipAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll, ZipAllSignature } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: ZipAllSignature<T>;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport interface ObserveOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Scheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\n\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\nexport class MulticastObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>,\n              private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { selector, source } = this;\n    const connectable = new ConnectableObservable(source, this.subjectFactory);\n    const subscription = selector(connectable).subscribe(subscriber);\n    subscription.add(connectable.connect());\n    return subscription;\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source._subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport interface TimeIntervalSignature<T> {\n  (scheduler?: Scheduler): Observable<TimeInterval<T>>;\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Scheduler } from '../Scheduler';\r\nimport { async } from '../scheduler/async';\r\n\r\n/**\r\n * @param scheduler\r\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\r\n * @method timestamp\r\n * @owner Observable\r\n */\r\nexport function timestamp<T>(scheduler: Scheduler = async): Observable<Timestamp<T>> {\r\n  return this.lift(new TimestampOperator(scheduler));\r\n}\r\n\r\nexport interface TimestampSignature<T> {\r\n  (scheduler?: Scheduler): Observable<Timestamp<T>>;\r\n}\r\n\r\nexport class Timestamp<T> {\r\n  constructor(public value: T, public timestamp: number) {\r\n  }\r\n};\r\n\r\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\r\n  constructor(private scheduler: Scheduler) {\r\n  }\r\n\r\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\r\n    return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\r\n  }\r\n}\r\n\r\nclass TimestampSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const now = this.scheduler.now();\r\n\r\n    this.destination.next(new Timestamp(value, now));\r\n  }\r\n}\r\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public exception?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.exception);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.exception);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.exception);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` exception.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<T, R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { Subject } from '../Subject';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return !this.id ?\n      super.schedule(state, delay) : (\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      <VirtualAction<T>> this.add(\n        new VirtualAction<T>(this.scheduler, this.work))\n      ).schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber();\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | Promise<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport interface MapSignature<T> {\n  <R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T, R>(url: string, headers?: Object): Observable<R>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function() {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    xhr.ontimeout = function xhrTimeout(e) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    (<any>xhr.ontimeout).request = request;\n    (<any>xhr.ontimeout).subscriber = this;\n    (<any>xhr.ontimeout).progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        xhr.onprogress = function xhrProgress(e) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        (<any>xhr.onprogress).progressSubscriber = progressSubscriber;\n      }\n\n      xhr.onerror = function xhrError(e) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      (<any>xhr.onerror).request = request;\n      (<any>xhr.onerror).subscriber = this;\n      (<any>xhr.onerror).progressSubscriber = progressSubscriber;\n    }\n\n    xhr.onreadystatechange = function xhrReadyStateChange(e) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    (<any>xhr.onreadystatechange).subscriber = this;\n    (<any>xhr.onreadystatechange).progressSubscriber = progressSubscriber;\n    (<any>xhr.onreadystatechange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4) {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, enqueue as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.closed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport let $$iterator: any;\n\nconst Symbol: any = root.Symbol;\n\nif (typeof Symbol === 'function') {\n  if (Symbol.iterator) {\n    $$iterator = Symbol.iterator;\n  } else if (typeof Symbol.for === 'function') {\n    $$iterator = Symbol.for('iterator');\n  }\n} else {\n    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {\n      // Bug for mozilla version\n      $$iterator = '@@iterator';\n    } else if (root.Map) {\n      // es6-shim specific logic\n      let keys = Object.getOwnPropertyNames(root.Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {\n          $$iterator = key;\n          break;\n        }\n      }\n    } else {\n      $$iterator = '@@iterator';\n    }\n}","let objectTypes = {\n  'boolean': false,\n  'function': true,\n  'object': true,\n  'number': false,\n  'string': false,\n  'undefined': false\n};\n\ndeclare let global: NodeJS.Global;\ndeclare let module: any;\ndeclare let exports: any;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\nexport let root: any = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\nlet freeGlobal = objectTypes[typeof global] && global;\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n  root = freeGlobal;\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/cache';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctKey';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {MulticastObservable} from './observable/MulticastObservable';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}