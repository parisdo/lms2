{"version":3,"file":"/Users/tittaya/Desktop/lms-2.0/tools/tasks/seed/build.index.prod.ts","sources":["/Users/tittaya/Desktop/lms-2.0/tools/tasks/seed/build.index.prod.ts"],"names":[],"mappings":";AAAA,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,eAAe,WAAM,mBAAmB,CAAC,CAAA;AACrD,qBAAqC,MAAM,CAAC,CAAA;AAC5C,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,uBAAmB,cAAc,CAAC,CAAA;AAClC,sBAA+B,aAAa,CAAC,CAAA;AAE7C,IAAM,OAAO,GAAQ,eAAe,EAAE,CAAC;AAkBvC;IAAgB,eAAuB;SAAvB,WAAuB,CAAvB,sBAAuB,CAAvB,IAAuB;QAAvB,8BAAuB;;IACnC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE;QACpD,YAAK;QACL,SAAS,EAAE,aAAa,EAAE;KAC7B,CAAC,CAAC;AACP,CAAC;AAKD;IACE,MAAM,CAAC,MAAM,CAAC,WAAI,CAAC,gBAAM,CAAC,OAAO,EAAE,gBAAM,CAAC,oBAAoB,CAAC,EAAE,WAAI,CAAC,gBAAM,CAAC,OAAO,EAAE,gBAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC;AACpH,CAAC;AAKD;IACE,MAAM,CAAC,MAAM,CAAC,WAAI,CAAC,gBAAM,CAAC,QAAQ,EAAE,gBAAM,CAAC,eAAe,CAAC,CAAC,CAAC;AAC/D,CAAC;AAMD;IACE,MAAM,CAAC,UAAS,QAAgB;QAC9B,IAAI,IAAI,GAAkB,gBAAS,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,UAAG,CAAC,CAAC;QACzD,SAAS,CAAC,CAAC,CAAC,GAAG,gBAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAG,CAAC,GAAG,OAAI,IAAI,CAAC,GAAG,EAAE,CAAE,CAAC;QACzF,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;IACpF,CAAC,CAAC;AACJ,CAAC;AA3CD,iBAAS;IACP,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,WAAI,CAAC,gBAAM,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;SACvD,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB,IAAI,CAAC,SAAS,EAAE,CAAC;SACjB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,sBAAc,EAAE,CAAC,CAAC;SACxC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAM,CAAC,eAAe,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC","sourcesContent":["import * as gulp from 'gulp';\nimport * as gulpLoadPlugins from 'gulp-load-plugins';\nimport { join, sep, normalize } from 'path';\nimport * as slash from 'slash';\n\nimport Config from '../../config';\nimport { templateLocals } from '../../utils';\n\nconst plugins = <any>gulpLoadPlugins();\n\n/**\n * Executes the build process, injecting the JavaScript and CSS dependencies into the `index.html` for the production\n * environment.\n */\nexport = () => {\n  return gulp.src(join(Config.APP_CLIENT_SRC, 'index.html'))\n    .pipe(injectJs())\n    .pipe(injectCss())\n    .pipe(plugins.template(templateLocals()))\n    .pipe(gulp.dest(Config.APP_CLIENT_DEST));\n};\n\n/**\n * Injects the given file array and transforms the path of the files.\n * @param {Array<string>} files - The files to be injected.\n */\nfunction inject(...files: Array<string>) {\n    return plugins.inject(gulp.src(files, { read: false }), {\n        files,\n        transform: transformPath()\n    });\n}\n\n/**\n * Injects the bundled JavaScript shims and application bundles for the production environment.\n */\nfunction injectJs() {\n  return inject(join(Config.JS_DEST, Config.JS_PROD_SHIMS_BUNDLE), join(Config.JS_DEST, Config.JS_PROD_APP_BUNDLE));\n}\n\n/**\n * Injects the bundled CSS files for the production environment.\n */\nfunction injectCss() {\n  return inject(join(Config.CSS_DEST, Config.CSS_PROD_BUNDLE));\n}\n\n/**\n * Transform the path of a dependency to its location within the `dist` directory according to the applications\n * environment.\n */\nfunction transformPath() {\n  return function(filepath: string) {\n    let path: Array<string> = normalize(filepath).split(sep);\n    arguments[0] = Config.APP_BASE + path.slice(4, path.length).join(sep) + `?${Date.now()}`;\n    return slash(plugins.inject.transform.apply(plugins.inject.transform, arguments));\n  };\n}\n"]}